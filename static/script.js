document.addEventListener("DOMContentLoaded", function () {
    let selectedArtifacts = [];

    const artifactSelect = document.getElementById("artifact-select");
    const confirmButton = document.getElementById("confirm-artifact");
    const statsDiv = document.getElementById("artifact-stats");
    const artifactNameHeader = document.getElementById("artifact-name");
    const tierSelectionDiv = document.getElementById("tier-selection");
    const resultDiv = document.getElementById("calculation-result");
    const selectedArtifactsList = document.getElementById("selected-artifacts");
	const saveButton = document.getElementById("save-build");
	const loadButton = document.getElementById("load-build");
    const clearButton = document.getElementById("clear-build");
	const artifactCount = document.getElementById("artifact-count");

    let allArtifacts = [];

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const tooltips = {
        "–í—ã–≤–æ–¥ —Ä–∞–¥": "–í—ã–≤–æ–¥–∏–º–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ ‚Äì –¥–æ–ª–∂–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–∞–¥–∏–∞—Ü–∏–∏.",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–∞–¥": "–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ ‚Äì —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤—ã–≤–æ–¥–∏–º–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏, –∏–Ω–∞—á–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ä–∞–¥–∏–∞—Ü–∏—é.",
        "–ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞—Ä–æ–≤": "–ï—Å–ª–∏ '+' ‚Äì –ø–æ–≤—ã—à–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —É–¥–∞—Ä–æ–≤ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
        "–ó–∞—â–∏—Ç–∞ –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π": "–ï—Å–ª–∏ '+' ‚Äì —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –∞–Ω–æ–º–∞–ª–∏–π.",
        "–ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É–ª—å": "–ï—Å–ª–∏ '+' ‚Äì —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –ø—É–ª—å.",
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "–î–µ—Ä–∂–∏—Ç–µ –æ–∫–æ–ª–æ 0. –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞–µ—Ç—Å—è; –µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ‚Äì –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–∞–µ—Ç—Å—è.",
        "–ö—Ä–æ–≤—å": "–í—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ '+', –∏–Ω–∞—á–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—É–¥–µ—Ç —Ç–µ—Ä—è—Ç—å –∫—Ä–æ–≤—å.",
        "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": "–ï—Å–ª–∏ '-' ‚Äì –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç % –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏, –µ—Å–ª–∏ '+' ‚Äì –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç.",
        "–°—Ç–æ–π–∫–æ—Å—Ç—å": "–£—Ä–æ–≤–µ–Ω—å —à–æ–∫–∞ ‚Äì –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ '+', –∏–Ω–∞—á–µ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–Ω–∞–Ω–∏–µ–º.",
        "–ó–¥–æ—Ä–æ–≤—å–µ": "–í–ª–∏—è–µ—Ç –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ –º–∞–∫—Å–∏–º—É–º–∞; —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0 –∏–ª–∏ '+'.",
        "–í–æ–¥–∞": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ç–æ–ª—è–µ—Ç –∂–∞–∂–¥—É.",
        "–ï–¥–∞": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ç–æ–ª—è–µ—Ç –≥–æ–ª–æ–¥.",
        "–®–∞–Ω—Å –ø–æ—Ä–µ–∑": "–ü—Ä–∏ —Ç–∏–∫–µ –¥–∞—ë—Ç —à–∞–Ω—Å –Ω–∞ –ø–æ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂—É.",
        "–õ–µ—á–µ–Ω–∏–µ –ø–æ—Ä–µ–∑": "–ó–∞—Ç—è–≥–∏–≤–∞–µ—Ç –ø–æ—Ä–µ–∑—ã ‚Äì —á–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.",
        "–®–∞–Ω—Å –ø–µ—Ä–µ–ª–æ–º–∞": "–î–∞–µ—Ç —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–ª–æ–º –Ω–æ–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂—É.",
        "–õ–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–ª–æ–º–∞": "–õ–µ—á–∏—Ç –ø–µ—Ä–µ–ª–æ–º—ã.",
        "–í—ã—Å–æ—Ç–∞ –ø—Ä—ã–∂–æ–∫": "–ü—Ä–∏–±–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ—Ç—É –ø—Ä—ã–∂–∫–∞, –µ—Å–ª–∏ '+'."  
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    fetch("/get_artifacts")
        .then(response => response.json())
        .then(data => {
            allArtifacts = data;
            console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:", allArtifacts);

            artifactSelect.addEventListener("change", function () {
                confirmButton.disabled = artifactSelect.value === "";
            });

            confirmButton.addEventListener("click", function () {
                let artifactName = artifactSelect.value;
                if (artifactName) addArtifact(artifactName);
                confirmButton.disabled = true;
                artifactSelect.value = "";
            });
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:", error));
		
		// –û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
    clearButton.addEventListener("click", function () {
        selectedArtifacts = [];
        updateSelectedList();
        artifactNameHeader.innerHTML = "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞";
        tierSelectionDiv.innerHTML = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä —Ç–∏—Ä–∞...";
        statsDiv.innerHTML = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏—Ä–∞...";
        calculateStats();
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –≤ localStorage
    saveButton.addEventListener("click", function () {
        if (selectedArtifacts.length > 0) {
            localStorage.setItem("savedBuild", JSON.stringify(selectedArtifacts));
            alert("–°–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
        } else {
            alert("–ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
        }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–±–æ—Ä–∫–∏ –∏–∑ localStorage
    loadButton.addEventListener("click", function () {
        const savedBuild = localStorage.getItem("savedBuild");
        if (savedBuild) {
            selectedArtifacts = JSON.parse(savedBuild);
            updateSelectedList();
            alert("–°–±–æ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
        } else {
            alert("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫.");
        }
    });
   
    // –û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
    clearButton.addEventListener("click", function () {
        selectedArtifacts = [];
        updateSelectedList();
        artifactNameHeader.innerHTML = "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞";
        tierSelectionDiv.innerHTML = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä —Ç–∏—Ä–∞...";
        statsDiv.innerHTML = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏—Ä–∞...";
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã)
    function addArtifact(name) {
        const artifactId = Date.now() + Math.random();
        selectedArtifacts.push({ id: artifactId, name: name, tier: null });
        updateSelectedList();
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    function copyArtifact(originalArtifact) {
        if (!originalArtifact.tier) {
            console.log("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏—Ä–∞.");
            return;
        }
        const copiedArtifact = {
            id: Date.now() + Math.random(),
            name: originalArtifact.name,
            tier: originalArtifact.tier
        };
        selectedArtifacts.push(copiedArtifact);
        updateSelectedList();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
function updateSelectedList() {
    if (!selectedArtifactsList) {
        console.error("‚ùå –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç selectedArtifactsList –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }

    selectedArtifactsList.innerHTML = "";

    selectedArtifacts.forEach((artifact) => {
        let listItem = document.createElement("li");
        listItem.classList.add("artifact-item");

        let artifactContainer = document.createElement("div");
        artifactContainer.classList.add("artifact-container");
        artifactContainer.onclick = function () {
            showTierSelection(artifact);
        };

        let artifactText = document.createElement("span");
        artifactText.innerHTML = `${artifact.name} (${artifact.tier ? "–¢–∏—Ä " + artifact.tier : "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä"})`;
        artifactText.classList.add("clickable");

        let buttonContainer = document.createElement("div");
        buttonContainer.classList.add("button-container");

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        let removeButton = document.createElement("span");
        removeButton.textContent = "‚úñÔ∏è";
        removeButton.classList.add("remove-btn");
        removeButton.onclick = function (event) {
            event.stopPropagation();
            selectedArtifacts = selectedArtifacts.filter(a => a.id !== artifact.id);
            updateSelectedList();
            artifactNameHeader.innerHTML = "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞";
            tierSelectionDiv.innerHTML = "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä —Ç–∏—Ä–∞...";
            statsDiv.innerHTML = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏—Ä–∞...";
            calculateStats();
        };

        // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        let copyButton = document.createElement("span");
        copyButton.textContent = "üìÑ";
        copyButton.classList.add("copy-btn");
        copyButton.onclick = function (event) {
            event.stopPropagation();
            if (typeof copyArtifact === "function") {
                copyArtifact(artifact);
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞: copyArtifact() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
        };

        buttonContainer.appendChild(removeButton);
        buttonContainer.appendChild(copyButton);

        artifactContainer.appendChild(artifactText);
        listItem.appendChild(artifactContainer);
        listItem.appendChild(buttonContainer);
        selectedArtifactsList.appendChild(listItem);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const countElement = document.getElementById("artifact-count");
    if (countElement) {
        countElement.textContent = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${selectedArtifacts.length}`;
    } else {
        console.warn("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç #artifact-count –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    calculateStats();
}

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏—Ä–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    function showTierSelection(artifact) {
        let artifactData = allArtifacts.find(a => a["–ò–º—è"] === artifact.name);
        if (!artifactData) return;

        artifactNameHeader.innerHTML = artifact.name;
        tierSelectionDiv.innerHTML = `<h4>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ä:</h4>`;
        statsDiv.innerHTML = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏—Ä–∞...";

        artifactData["–í–∞—Ä–∏–∞–Ω—Ç—ã"].forEach(variant => {
            let tierDiv = document.createElement("div");
            tierDiv.classList.add("tier-option");
            tierDiv.innerHTML = `–¢–∏—Ä ${variant["–¢–∏—Ä"]}`;

            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏—Ä–∞ –∑–µ–ª—ë–Ω—ã–º
            if (artifact.tier === variant["–¢–∏—Ä"]) {
                tierDiv.style.backgroundColor = "lightgreen";
            }

            tierDiv.addEventListener("click", function () {
                artifact.tier = variant["–¢–∏—Ä"];
                showArtifactStats(variant);
                updateSelectedList();
            });

            tierSelectionDiv.appendChild(tierDiv);

            // –ï—Å–ª–∏ —Ç–∏—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if (artifact.tier === variant["–¢–∏—Ä"]) {
                showArtifactStats(variant);
            }
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ tooltip
    function showArtifactStats(variant) {
        statsDiv.innerHTML = "<h4>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>";
        for (let key in variant) {
            if (key !== "–ò–º—è" && key !== "–¢–∏—Ä" && variant[key] !== null) {
                let p = document.createElement("p");
                p.textContent = `${key}: ${variant[key]}`;
                if (tooltips[key]) {
                    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç tooltip
                    let tooltipSpan = document.createElement("span");
                    tooltipSpan.classList.add("tooltip");

                    // –ò–∫–æ–Ω–∫–∞-—Ç—Ä–∏–≥–≥–µ—Ä
                    let icon = document.createElement("span");
                    icon.classList.add("tooltip-icon");
                    icon.textContent = "?";

                    // –°–∞–º —Ç–µ–∫—Å—Ç tooltip
                    let tooltipText = document.createElement("span");
                    tooltipText.classList.add("tooltiptext");
                    tooltipText.textContent = tooltips[key];

                    tooltipSpan.appendChild(icon);
                    tooltipSpan.appendChild(tooltipText);

                    p.appendChild(tooltipSpan);
                }
                statsDiv.appendChild(p);
            }
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    function calculateStats() {
        if (selectedArtifacts.length === 0) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞, –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.");
            resultDiv.innerHTML = "<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3><p>–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.</p>";
            return;
        }

        console.log("üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", JSON.stringify({ artifacts: selectedArtifacts }));

        fetch("/calculate", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ artifacts: selectedArtifacts })
        })
        .then(response => {
            console.log("üìå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å):", response.status);
            return response.json();
        })
        .then(data => {
            console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
            displayResults(data);
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error));
    }

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏ –æ–∫—Ä–∞—Å–∫–æ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º
    function displayResults(stats) {
        resultDiv.innerHTML = "<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>";

        const priorityOrder = ["–í—ã–≤–æ–¥ —Ä–∞–¥", "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–∞–¥"];
        let sortedStats = {};

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–≤—ã–º–∏
        priorityOrder.forEach(prop => {
            if (stats.hasOwnProperty(prop)) {
                sortedStats[prop] = stats[prop];
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        Object.keys(stats)
            .filter(key => !priorityOrder.includes(key))
            .sort()
            .forEach(key => {
                sortedStats[key] = stats[key];
            });

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ–∫—Ä–∞—Å–∫–æ–π
        for (let key in sortedStats) {
            let value = sortedStats[key];
            let color = "black";

            if (value === 0) {
                color = "gray";
            } else {
                if (key === "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞") {
                    if (value < 0) {
                        color = "blue";
                    } else if (value > 0) {
                        color = "red";
                    } else {
                        color = "green";
                    }
                } else if (key === "–®–∞–Ω—Å –ø–æ—Ä–µ–∑" || key === "–®–∞–Ω—Å –ø–µ—Ä–µ–ª–æ–º–∞" || key === "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–∞–¥") {
                    color = "red";
                } else {
                    color = value > 0 ? "green" : "red";
                }
            }

            if (key.startsWith("–°—Ç–æ–π–∫–æ—Å—Ç—å")) {
                key = key.replace(" (–Ω–µ –ø–∞–¥–∞—Ç—å)", "");
            }

            let p = document.createElement("p");
            p.style.color = color;
            p.textContent = `${key}: ${value}`;
            // –î–æ–±–∞–≤–ª—è–µ–º tooltip –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–æ
            if (tooltips[key]) {
                let tooltipSpan = document.createElement("span");
                tooltipSpan.classList.add("tooltip");

                let icon = document.createElement("span");
                icon.classList.add("tooltip-icon");
                icon.textContent = "?";

                let tooltipText = document.createElement("span");
                tooltipText.classList.add("tooltiptext");
                tooltipText.textContent = tooltips[key];

                tooltipSpan.appendChild(icon);
                tooltipSpan.appendChild(tooltipText);
                p.appendChild(tooltipSpan);
            }
            resultDiv.appendChild(p);
        }
    }
});