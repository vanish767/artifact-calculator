from flask import Flask, render_template, jsonify, request
import json
import os

app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
def load_artifacts():
    try:
        with open("artifacts.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        for artifact in data:
            for variant in artifact["–í–∞—Ä–∏–∞–Ω—Ç—ã"]:
                for key, value in variant.items():
                    if isinstance(value, str):
                        value = value.replace(',', '.')  # –ú–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
                        if value.replace('.', '').replace('-', '').isdigit():
                            variant[key] = float(value) if '.' in value else int(value)

        return data

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:", str(e))
        return []

@app.route("/")
def index():
    artifacts = load_artifacts()
    return render_template("index.html", artifacts=artifacts)

@app.route("/get_artifacts")
def get_artifacts():
    return jsonify(load_artifacts())

@app.route("/calculate", methods=["POST"])
def calculate():
    try:
        data = request.json
        print("üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        selected_artifacts = data.get("artifacts", [])
        if not selected_artifacts:
            return jsonify({"error": "–ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞"}), 400

        result = {}

        for item in selected_artifacts:
            artifact_name = item["name"]
            tier = item["tier"]

            for artifact in load_artifacts():
                if artifact["–ò–º—è"] == artifact_name:
                    for variant in artifact["–í–∞—Ä–∏–∞–Ω—Ç—ã"]:
                        if variant["–¢–∏—Ä"] == tier:
                            for key, value in variant.items():
                                if key not in ["–ò–º—è", "–¢–∏—Ä"] and value is not None:
                                    try:
                                        numeric_value = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                        
                                        if isinstance(value, (int, float)):  
                                            numeric_value = value  # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º
                                        elif isinstance(value, str):  
                                            value = value.replace(',', '.')  # –ú–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                                            if value.replace('.', '').replace('-', '').isdigit():  
                                                numeric_value = float(value)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                                        
                                        result[key] = result.get(key, 0) + numeric_value  
                                    except ValueError:
                                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {key} = {value}")
                                        continue

        print("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", result)
        return jsonify(result)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ /calculate:", str(e))
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (__name__ —Å –¥–≤—É–º—è –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏)
    port = int(os.environ.get("PORT", 10000))  # Render —Ç—Ä–µ–±—É–µ—Ç PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    app.run(host="0.0.0.0", port=port)